@using Models.EntityModels
@model Models.ViewModels.EditFlat

<div class="col-md-12 custom-center-panel">
    <h4>Edytuj mieszkanie</h4>
@if (!ViewData.ModelState.IsValid)
{
    <div class="row" style="padding: 10px">
        <div class="panel panel-danger">
            <button type="button" class="close" data-dismiss="alert" style="margin-right:5px; margin-top: 5px">×</button>
            <div class="panel-heading">
                Błąd
            </div>
            <div class="panel-body">
                @Html.ValidationSummary()
            </div>
        </div>
    </div>
}
    @using (Html.BeginForm("EditFlat", "Admin", FormMethod.Post, new {enctype = "multipart/form-data"}))
    {
        Html.AntiForgeryToken();
        <div class="form-group-sm">
            <div class="row">
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-6">
                            <small><b>Tytuł:</b></small>
                            <div class="has-feedback">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @style = "max-width: none" + ((ViewData.ModelState.ContainsKey("Title") && ViewData.ModelState["Title"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                                <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <small><b>Cena (zł):</b></small>
                            <div class="has-feedback">
                                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Price") && ViewData.ModelState["Price"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                                <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <small>Miasto:</small>
                            <div class="has-feedback">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("City") && ViewData.ModelState["City"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                                <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color:red"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <small>Lokalizacja:</small>
                            @Html.EditorFor(model => model.Location, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Location") && ViewData.ModelState["Location"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <small>Powierzchnia:</small>
                            @Html.EditorFor(model => model.Area, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Area") && ViewData.ModelState["Area"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                        <div class="col-md-6">
                            <small>Kondygnacja:</small>
                            @Html.EditorFor(model => model.Storey, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Storey") && ViewData.ModelState["Storey"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <small>Stan techniczny:</small>
                            @Html.EditorFor(model => model.TechnicalCondition, new {htmlAttributes = new {@class = "form-control"}, @style = ((ViewData.ModelState.ContainsKey("TechnicalCondition") && ViewData.ModelState["TechnicalCondition"].Errors.Count > 0) ? ";border: 2px solid red" : "")})
                        </div>
                        <div class="col-md-6">
                            <small>Liczba pokoi:</small>
                            @Html.EditorFor(model => model.Rooms, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Rooms") && ViewData.ModelState["Rooms"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <small>Ogrzewanie:</small>
                            @Html.EditorFor(model => model.Heating, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Heating") && ViewData.ModelState["Heating"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                        <div class="col-md-6">
                            <small>Czynsz:</small>
                            @Html.EditorFor(model => model.Rent, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Rent") && ViewData.ModelState["Rent"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <small>Forma własności:</small>
                            @Html.EditorFor(model => model.Ownership, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Ownership") && ViewData.ModelState["Ownership"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                        <div class="col-md-6">
                            <small>Cena za m<sup>2</sup> (zł):</small>
                            @Html.EditorFor(model => model.PricePerMeter, new {htmlAttributes = new {@class = "form-control", @style = ((ViewData.ModelState.ContainsKey("PricePerMeter") && ViewData.ModelState["PricePerMeter"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <small>Opis:</small>
                            <div class="has-feedback">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @style = "resize: none; max-width: none; height:200px" + ((ViewData.ModelState.ContainsKey("Description") && ViewData.ModelState["Description"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                                <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color:red"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <small>Szczegóły:</small>
                            @Html.EditorFor(model => model.Details, new {htmlAttributes = new {@class = "form-control", @style = "resize: none; max-width: none; height:200px" + ((ViewData.ModelState.ContainsKey("Details") && ViewData.ModelState["Details"].Errors.Count > 0) ? ";border: 2px solid red" : "")}})
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-12">
                            <small>Typ oferty:</small>
                            @Html.DropDownListFor(model => model.ToLet, new SelectList(new Dictionary<string, bool>() {{"Sprzedaż", false}, {"Wynajem", true}}, "value", "key"), new {@class = "form-control", @style = "max-width:none"})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <small>Osoba prowadząca:</small>
                            @Html.DropDownListFor(model => model.Worker, new SelectList((List<Worker>) ViewData["Workers"], "Id", "FullName"), new {@class = "form-control", @id = "workers", @style = "max-width:none"})
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <small>Zdjęcia:</small>
                            <div class="row">
                                @foreach (var photo in Model.Pictures)
                                {
                                    <div class="col-md-4">
                                        <img src="/Content/Photos/@photo.Link" style="width: 100%; margin-bottom: 10px" class="existsPhotos" data-id="@photo.Id"/>
                                    </div>
                                }
                            </div>
                            <input type="file" multiple class="form-control" id="Files" name="Files" style="max-width: none"/>
                            @Html.ListBoxFor(model => model.ToDeleted, new SelectList(new List<int>()), new {@class = "form-control", @style = "max-width:none; height: 100px"})
                        </div>
                    </div>
                    <div class="row" style="color: rgb(74, 0, 0)">
                        <div class="col-md-12">
                            <div class="col-md-8" style="font-size:10px">
                                Akceptowane pliki: jpg, png, gif, bnp
                            </div>
                            <div class="col-md-4" style="text-align:right; font-size:10px">
                                Max 5MB
                            </div>
                        </div>
                    </div>
                    <input type="hidden" id="AdType" name="AdType" value="Flat"/>
                    <div class="row">
                        <div class="col-md-12" style="text-align: center; margin-top: 10px">
                            <button type="submit" class="btn btn-xs btn-success" style="width: 150px">Zapisz</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    }
</div>
<style type="text/css">
    .existsPhotos {
        cursor: pointer;
    }
</style>

<script src="/Scripts/jquery-1.10.2.js"></script>
<script language="javascript">
    $("#ToDeleted").hide();
    var toDeleted = [];
    $(".existsPhotos").on("click", function() {
        if ($(this).hasClass("grayscale")) {
            $(this).removeClass("grayscale");
            var photos = $(".photoItem");
            for (var i = 0; i < photos.length; i++) {
                if (photos[i].value == $(this).data("id")) {
                    photos[i].remove();
                }
                ;
            }
        } else {
            $(this).addClass("grayscale");
            toDeleted.push($(this).data("id"));
            var option = document.createElement("option");
            option.value = $(this).data("id");
            option.text = $(this).data("id");
            $(option).addClass("photoItem");
            $("#ToDeleted").append(option);
        }
        ;
        $(".photoItem").prop("selected", true);
    });

    $("#Files").on("change", function() {
        var errors = [];
        var valid = true;
        var totalSize = 0;
        for (var i = 0; i < $(this)[0].files.length; i++) {
            if ($(this)[0].files[i].size / 1024 / 1024 > 5) {
                valid = false;
                errors.push('Plik: ' + $(this)[0].files[i].name + ' jest zbyt duży! (max 5MB)');
            }
            totalSize += $(this)[0].files[i].size / 1024 / 1024;
        }

        if (valid == true) {
            if (totalSize > 20) {
                valid = false;
                errors.push("Łączna wielkość plików jest za duża! (max 20MB)");
            }
        }

        if (valid == false) {
            $(this)[0].value = "";
            alert(errors.join("\n"));
        }
    });
</script>

