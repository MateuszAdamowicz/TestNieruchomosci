@using Models.EntityModels
@model Models.ViewModels.AdminLand

@if (!ViewData.ModelState.IsValid)
{
    <div class="row" style="padding: 10px" id="danger-panel">
        <div class="panel panel-danger">
            <button type="button" class="close" data-dismiss="alert" style="margin-right:5px; margin-top: 5px">×</button>
            <div class="panel-heading">
                Błąd
            </div>
            <div class="panel-body">
                @Html.ValidationSummary()
            </div>
        </div>
    </div>
}

@using (Html.BeginForm("AddLand", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    Html.AntiForgeryToken();
    <div class="form-group-sm">
        <div class="row">
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-6">
                        <small><b>Tytuł:</b></small>
                        <div class="has-feedback">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @style = "max-width: none" + ((ViewData.ModelState.ContainsKey("Title") && ViewData.ModelState["Title"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                            <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <small><b>Cena (zł):</b></small>
                        <div class="has-feedback">
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Price") && ViewData.ModelState["Price"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                            <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <small>Miasto:</small>
                        <div class="has-feedback">
                            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("City") && ViewData.ModelState["City"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                            <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <small>Lokalizacja:</small>
                        @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Location") && ViewData.ModelState["Location"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <small>Powierzchnia:</small>
                        @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Area") && ViewData.ModelState["Area"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                    </div>
                    <div class="col-md-6">
                        <small>Forma własności:</small>
                        @Html.EditorFor(model => model.Ownership, new { htmlAttributes = new { @class = "form-control", @style = ((ViewData.ModelState.ContainsKey("Ownership") && ViewData.ModelState["Ownership"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <small>Opis:</small>
                        <div class="has-feedback">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @style = "resize: none; max-width: none; height:200px" + ((ViewData.ModelState.ContainsKey("Description") && ViewData.ModelState["Description"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                            <span class="glyphicon-small glyphicon-asterisk form-control-feedback" aria-hidden="true" style="right:0; color: red"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <small>Szczegóły:</small>
                        @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control", @style = "resize: none; max-width: none; height:200px" + ((ViewData.ModelState.ContainsKey("Details") && ViewData.ModelState["Details"].Errors.Count > 0) ? ";border: 2px solid red" : "") } })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-12">
                        <small>Osoba prowadząca:</small>
                        @Html.DropDownListFor(model => model.Worker, new SelectList((List<Worker>)ViewData["Workers"], "Id", "FullName"), new { @class = "form-control", @id = "workers", @style = "max-width:none" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <small>Zdjęcia:</small>
                        <input type="file" multiple class="form-control" id="Files" name="Files" accept="image/*" />
                    </div>
                </div>
                <div class="row" style="color: rgb(74, 0, 0)">
                    <div class="col-md-12">
                        <div class="col-md-8" style="font-size:10px">
                            Akceptowane pliki: jpg, png, gif, bnp
                        </div>
                        <div class="col-md-4" style="text-align:right; font-size:10px">
                            Max 5MB
                        </div>
                    </div>
                </div>
                <input type="hidden" id="AdType" name="AdType" value="Land"/>
                <div class="row">
                    <div class="col-md-12" style="text-align: center; margin-top: 10px">
                        <button type="submit" class="btn btn-xs btn-success" style="width: 150px">Zapisz</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
}
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script type="text/javascript">
    $("#Files").on("change", function () {
        var errors = [];
        var valid = true;
        var totalSize = 0;
        for (var i = 0; i < $(this)[0].files.length; i++) {
            if ($(this)[0].files[i].size / 1024 / 1024 > 5) {
                valid = false;
                errors.push('Plik: ' + $(this)[0].files[i].name + ' jest zbyt duży! (max 5MB)');
            }
            totalSize += $(this)[0].files[i].size / 1024 / 1024;
        }

        if (valid == true) {
            if (totalSize > 20) {
                valid = false;
                errors.push("Łączna wielkość plików jest za duża! (max 20MB)");
            }
        }

        if (valid == false) {
            $(this)[0].value = "";
            alert(errors.join("\n"));
        }
    })
</script>

<script type="text/javascript">
    $(".close").on("click", function () {
        $("#danger-panel")[0].remove();
    });
</script>